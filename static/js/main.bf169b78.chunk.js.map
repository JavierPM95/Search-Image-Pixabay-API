{"version":3,"sources":["components/search.js","components/containerSearch.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","onSubmit","e","preventDefault","console","log","searched","type","placeholder","onChange","target","value","icon","faSearch","ContainerSearch","results","map","result","key","id","src","previewURL","alt","tags","likes","faThumbsUp","views","faEye","href","largeImageURL","rel","onClick","handlePrevious","faChevronLeft","handleNext","faChevronRight","App","useState","setSearched","setResults","page","setPage","consultAPI","a","url","fetch","res","json","resJson","hits","useEffect","length","scroll","document","querySelector","scrollIntoView","behavior","block","role","aria-labelledby","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iTA8BeA,EAxBA,SAACC,GAYZ,OACI,0BAAMC,UAAU,WAAWC,SANJ,SAACC,GACxBA,EAAEC,iBACFC,QAAQC,IAAIN,EAAMO,SAASA,YAKvB,yBAAKN,UAAU,uBACX,2BAAOO,KAAK,OAAOP,UAAU,+BAA+BQ,YAAY,iDAAiDC,SAZ1G,SAACP,GACrBH,EAAMO,SAASJ,EAAEQ,OAAOC,WAavB,yBAAKX,UAAU,uBACX,4BAAQO,KAAK,SAASP,UAAU,iDAAhC,UAAwF,kBAAC,IAAD,CAAiBY,KAAMC,UCQhHC,EA5BS,SAACf,GAGrB,OACA,yBAAKC,UAAU,OAEPD,EAAMgB,QAAQC,KAAI,SAAAC,GAAM,OACpB,yBAAKjB,UAAU,yCAAyCkB,IAAKD,EAAOE,IAChE,yBAAKnB,UAAU,QACf,yBAAKA,UAAU,uBAAuBoB,IAAKH,EAAOI,WAAYC,IAAKL,EAAOM,OACtE,yBAAKvB,UAAU,aACX,wBAAIA,UAAU,aAAaiB,EAAOO,MAAlC,IAAyC,kBAAC,IAAD,CAAiBZ,KAAMa,OAChE,uBAAGzB,UAAU,aAAaiB,EAAOS,MAAjC,IAAwC,kBAAC,IAAD,CAAiBd,KAAMe,OAC/D,uBAAG3B,UAAU,4BAA4B4B,KAAMX,EAAOY,cAAenB,OAAO,SAASoB,IAAI,uBAAzF,oBAMpB,yBAAK9B,UAAU,2CACX,4BAAQA,UAAU,oBAAoB+B,QAAS,kBAAMhC,EAAMiC,mBAAkB,kBAAC,IAAD,CAAiBpB,KAAMqB,MAApG,aACA,4BAAQjC,UAAU,oBAAoB+B,QAAS,kBAAMhC,EAAMmC,eAA3D,QAA8E,kBAAC,IAAD,CAAiBtB,KAAMuB,UC+ClGC,MAjEf,WAAgB,IAAD,EAEmBC,mBAAS,IAF5B,mBAEN/B,EAFM,KAEIgC,EAFJ,OAGiBD,mBAAS,IAH1B,mBAGNtB,EAHM,KAGGwB,EAHH,OAISF,mBAAS,GAJlB,mBAIRG,EAJQ,KAIFC,EAJE,KAOPC,EAAU,uCAAG,gCAAAC,EAAA,6DACXC,EADW,4EACgEtC,EADhE,iBACiFkC,GADjF,SAECK,MAAOD,GAFR,cAEXE,EAFW,gBAGOA,EAAIC,OAHX,OAGTC,EAHS,OAIfT,EAAWS,EAAQC,MAJJ,2CAAH,qDAOhBC,qBAAU,WACJ5C,EAAS6C,OAAS,GACtBT,MAEC,CAACpC,IAgBJ4C,qBAAU,WACJV,EAAO,GACXE,MAEC,CAACF,IAGJ,IAAMY,EAAS,WACIC,SAASC,cAAc,cAC/BC,eAAe,CAACC,SAAS,SAAUC,MAAM,WAGpD,OACE,6BACE,yBAAKzD,UAAU,iBACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,eAAd,gBAAyC,0BAAM0D,KAAK,MAAMC,kBAAgB,gBAAjC,iBACzC,kBAAC,EAAD,CAAQrD,SAAUgC,KAEpB,6BACE,kBAAC,EAAD,CACAvB,QAASA,EACTmB,WAlCW,WACjBkB,IACAX,EAAQD,GAAM,IAiCRR,eA9Be,WACjBQ,EAAO,IACTC,EAAQD,GAAM,GACdY,YCzBcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASe,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxE,QAAQwE,MAAMA,EAAMC,c","file":"static/js/main.bf169b78.chunk.js","sourcesContent":["import { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React from 'react'\r\n\r\n\r\n\r\nconst Search = (props)=> {\r\n    \r\n    //search per letter\r\n    const handleSearchChange = (e) => {\r\n           props.searched(e.target.value);\r\n    }\r\n    //search per searchings\r\n    const handleSearchSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(props.searched.searched);\r\n    }\r\n    \r\n    return (\r\n        <form className=\"row mt-5\" onSubmit={handleSearchSubmit} >\r\n            <div className=\"col-md-8 form-group\">\r\n                <input type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Search any image. Example: banana, city, stone\" onChange={handleSearchChange} />\r\n            </div>\r\n            <div className=\"col-md-4 form-group\">\r\n                <button type=\"submit\" className=\"form-control btn btn-primary btn-block btn-lg\" >Search <FontAwesomeIcon icon={faSearch} /></button>\r\n            </div>            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport { faChevronLeft, faChevronRight, faEye, faThumbsUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst ContainerSearch = (props) => {\r\n\r\n    \r\n    return(\r\n    <div className=\"row\">\r\n        {\r\n            props.results.map(result => (\r\n                <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\" key={result.id}>\r\n                    <div className=\"card\">\r\n                    <img className=\"card-img-top p-5 row\" src={result.previewURL} alt={result.tags} />\r\n                        <div className=\"card-body\">\r\n                            <h5 className=\"card-text\">{result.likes} <FontAwesomeIcon icon={faThumbsUp} /></h5>\r\n                            <p className=\"card-text\">{result.views} <FontAwesomeIcon icon={faEye} /></p>\r\n                            <a className=\"btn btn-primary btn-block\" href={result.largeImageURL} target=\"_blank\" rel=\"noopener noreferrer\" >View image</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ))\r\n        }\r\n        <div className=\"col-md-12 d-flex justify-content-center\">\r\n            <button className=\"btn btn-info mx-1\" onClick={() => props.handlePrevious()}><FontAwesomeIcon icon={faChevronLeft}/> Previous</button>\r\n            <button className=\"btn btn-info mx-1\" onClick={() => props.handleNext()}>Next <FontAwesomeIcon icon={faChevronRight}/></button>\r\n        </div>\r\n    </div>\r\n    )\r\n} \r\n\r\n\r\nexport default ContainerSearch;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Search from './components/search';\nimport ContainerSearch from './components/containerSearch';\n\n\n\nfunction App() {\n  \n  const [searched, setSearched] = useState('');\n  const [results, setResults] = useState([]);\n  var [page, setPage] = useState(1)\n\n//Fetch API de Pixabay\n  const consultAPI = async () => {\n    const url = `https://pixabay.com/api/?key=18695046-a8b1de73d33432f98b8e4e1a4&q=${searched}&page=${page}`;\n    const res = await fetch (url);\n      const resJson = await res.json();\n      setResults(resJson.hits);\n  }\n\n  useEffect(() => {\n    if (searched.length > 2) {\n    consultAPI();\n    }\n  }, [searched])\n  \n  \n  //Pagination\n  const handleNext = () => {\n    scroll();\n    setPage(page+=1);\n  }\n  \n  const handlePrevious = () => {\n    if (page > 0) {\n      setPage(page-=1);\n      scroll();\n    }\n  }\n\n  useEffect(() => {\n    if (page > 0) {\n    consultAPI();\n    }\n  }, [page])\n  \n  //Scroll\n  const scroll = () => {\n    const elemento = document.querySelector('.jumbotron');\n    elemento.scrollIntoView({behavior:'smooth', block:'start'});\n  }\n\n  return (\n    <div>\n      <div className=\"app container\">\n        <div className=\"jumbotron\">\n          <h1 className=\"text-center\">Image Search <span role=\"img\" aria-labelledby=\"cristal-ball\">ðŸ”®</span></h1>\n          <Search searched={setSearched} />\n        </div>\n        <div>\n          <ContainerSearch \n          results={results}\n          handleNext={handleNext}\n          handlePrevious={handlePrevious}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}